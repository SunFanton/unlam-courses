TP - Unidad 1 - Memoria cache con Ripes (parte B)

1) Teniendo en cuenta el siguiente ejemplo de programa escrito
en Ripes:

.data
cadena: .string "Trabajo practico de memoria caché en Ripes"
.text
la x5,cadena
salto:
lb x6,0(x5)
add a0,x0,x6
addi a7,x0,11
ecall
addi x5,x5,1
bne x6,x0,salto
fin:
beq x0,x0,fin

Indique, utilizando las configuraciones de la memoria cache en Ripes, cuál
sería la configuración que utilice la caché de datos de menor tamaño en:
● Asignación asociativa
● Asignación Directa
● Asignación asociativa por conjunto
Indique cómo quedarían configurados los diferentes campos en cada caso

Respuesta:
Las configuraciones que utilizan la cache de datos de menor tamaño (de las configuraciones que ya vienen preseteadas en Ripes) serian la de asignacion asociativa y la de asignacion directa, ya que en ambos casos la cantidad de lineas, cantidad de palabras por linea y tamaño de palabra necesitados son iguales para la ejecucion del programa.
Ahora, si tenemos en cuenta factores como la cantidad de bits no solo de la dirección de memoria, sino otros como los bits de validez, suciedad y de politica de reemplazo, en ese caso sería la configuración de asociacion directa la que usa menor cantidad de bits (haciendo un tamaño menor).
Ademas, como dato, tener en cuenta que todas las configuraciones son para direcciones de 32 bits, ya que la memoria principal cuenta con 2 a la 32 bytes o sea 4GB (y se direcciona al byte).Tambien se puede pensar que cuenta con 2 a la 32 direcciones, donde cada dirección apunta a un byte, y que se direcciona 1G palabras, pues cada palabra es de 4 bytes.

En cada caso, la configuracion es la siguiente:

● Asignación asociativa: 
32 lineas, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
32 bits - 4 bits = 28 bits -> para etiqueta

● Asignación Directa:
32 lineas, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
log2(32 lineas) = 5 bits -> para linea
32 bits - (4 bits + 5 bits) = 23 bits -> para etiqueta

● Asignación asociativa por conjunto:
32 lineas, 2 vias (lineas) por conjunto, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
32/2 = 16 - log2(16 conjuntos) = 4 bits -> para conjunto
32 - (4 + 4) = 24 bits -> para etiqueta

-----------------------------------------------------------------------------------------------------------

2) Teniendo en cuenta direcciones de 32 bits, una asignación asociativa de 4 líneas y dos palabras por línea, en que línea y con cual offset se ubicaría el inicio de la palabra “memoria” del ejercicio anterior.

Respuesta: 
2 palabras por linea = 2x4bytes = 8bytes por linea
log2(8bytes) = 3 bits para el offset

Contando desde el inicio hasta la "m" de "memoria" (incluyendola), hay 21 caracteres o sea 21 bytes.
21 - 8 (de la primer fila) = 13
13 - 8 (de la segunda fila) = 5 -> quedan 5 bytes en la tercer línea (sería la línea 2 -> 10, ya que se empieza desde línea 0 -> 00)

Para representar el 5to byte en el offset sería: 100 
Si lo imaginamos en el diagrama de la direccion en Ripes seria: 
el 5to byte esta en la segunda palabra (ya que los 4 bytes de la primera ya se "pasaron"), en el primer byte de la segunda palabra, o sea:
1 00. El primer 1 simboliza la segunda palabra (de las dos que integran la linea). 

El inicio de la palabra "memoria" se ubicaria en la tercera línea con un offset 100

-----------------------------------------------------------------------------------------------------------

3) Teniendo en cuenta direcciones de 32 bits, una asignación directa de 4 líneas y cuatro palabras por línea, en que línea y con cual offset se ubicaría el inicio de la palabra “cache” del ejercicio anterior.

Respuesta:
4 lineas -> log2(4) = 2 bits para linea
4 palabras por linea = 4x4bytes = 16bytes por linea
log2(16bytes) = 4 bits para el offset

Contando desde el inicio hasta la "c" de "cache" (incluyendola), hay 29 caracteres o sea 29 bytes.
29 / 16 = 1 linea completa
Resto: 13 bytes en segunda linea (linea 1 -> 01)

13 / 4 = 3 (palabras). Resto 1 (byte de la cuarta palabra)

Para representar el byte 13 en el offset seria: 11 00 (o sea cuarta palabra, primer byte, es decir 11 00)

-----------------------------------------------------------------------------------------------------------

4) Teniendo en cuenta direcciones de 32 bits, una memoria caché de 512 bits y una asignación asociativa por conjunto de 2 vías y dos palabras por línea, en que línea, cuál conjunto y con cual offset se ubicaría el inicio de la palabra “Ripes” del ejercicio anterior.

2 palabras por linea = 2x4bytes = 8 bytes por linea
8 bytes x 2 = 16 bytes por conjunto
MC de 512 bits = 512 / 8 = 64 bytes de MC
64 bytes / 8 bytes = 8 lineas
8 lineas / 2 = 4 conjuntos

log2(4) = 2 bits para conjunto
log2(8) = 3 bits para offset

Contando desde el inicio hasta la "R" de "Ripes" (incluyendola), hay 38 caracteres o sea 38 bytes.
38 bytes / 16 bytes = 2 conjuntos completos (en realidad son 4 medio conjuntos)
Resto: 6 bytes en segunda línea de primer conjunto (conjunto 0 representado en bits: 00)

Para representar el byte 6 en el offset seria: 101 (segunda palabra ya que 6 / 4 = 1 palabra completa; resto 2 -> segundo byte, o sea 1 01)

Esto pensado así tiene sentido, pero en Ripes en realidad la "R" está en el cuarto byte de la cuarta palabra porque la é de la palabra "caché" es un caracter especial por el acento que ocupa dos bytes más, lo que hace que quede corrido en realidad.

-----------------------------------------------------------------------------------------------------------

5) El siguiente ejercicio escrito para Ripes invierte el vector al finalizar su
ejecución.

vector: .word 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90
final:

.text
la x5,vector
la x6, final
addi x6, x6, -4

invertir:
lw x10, 0(x5)
lw x11, 0(x6)
sw x11, 0(x5)
sw x10, 0(x6)
addi x5, x5, 4
addi x6, x6, -4
bge x6, x5, invertir

fin:
beq x0,x0,fin

Indique el formato y contenido de los campos de la caché de instrucciones, para cada método de asignación pre-seteados en Ripes para la instrucción sw x11,0(x5)

Respuesta: (viendolo en Ripes)

La instruccion en Ripes se encuentra en la direccion 0x0000001c, y la instruccion en si es la palabra 00b2a023

● Asignación asociativa: 
32 lineas, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
32 bits - 4 bits = 28 bits -> para etiqueta

En la cache de instrucciones queda asi: 0000000000000000000000000001 1100

● Asignación Directa:
32 lineas, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
log2(32 lineas) = 5 bits -> para linea
32 bits - (4 bits + 5 bits) = 23 bits -> para etiqueta

En la cache de instrucciones queda asi: 00000000000000000000000 00001 1100

● Asignación asociativa por conjunto:
32 lineas, 2 vias (lineas) por conjunto, 4 palabras por linea, 32 bits (4bytes) por palabra.
Es decir:
log2(16bytes) = 4 bits -> para palabra (offset)
32/2 = 16 - log2(16 conjuntos) = 4 bits -> para conjunto
32 - (4 + 4) = 24 bits -> para etiqueta

En la cache de instrucciones queda asi: 000000000000000000000000 0001 1100

-----------------------------------------------------------------------------------------------------------

6) Al finalizar la ejecución del ejercicio anterior que instrucciones queda cargadas en la línea 2 de la memoria caché de instrucciones con asignación asociativa 32 líneas 4 palabra por línea.

Respuesta: (viendo en Ripes)

En la linea 2 quedan cargadas las siguientes instrucciones:
Palabra 1: ffc30313        addi x6 x6 -4
Palabra 2: 0002a503        lw x10 0 x5
Palabra 3: 00032583        lw x11 0 x6
Palabra 4: 00b2a023        sw x11 0 x5

-----------------------------------------------------------------------------------------------------------

7) Al finalizar la ejecución del ejercicio 5 en qué línea de la memoria caché de datos queda cargado el valor 20 teniendo en cuenta asignación asociativa 32 líneas 4 palabra por línea, y en qué línea si fueran 2 palabras por línea.

EL vector tiene 19 elementos, e intercambia los elementos entre si de forma que el elemento de pos 0 cambia con elemento de pos 18, el de pos 1 con pos 17 y asi sucesivamente.
Cada elemento tiene 4 bytes (1 palabra)

En el primer caso no queda cargado el valor 20 en ninguna linea al finalizar la ejecucion (no se por que).
En el segundo caso queda en la sexta linea, primer palabra (tampoco se por que)

PREGUNTAR

-----------------------------------------------------------------------------------------------------------

8) Indicar en que se modifica la configuración de la memoria caché en Ripes dependiendo si la escritura es inmediata o diferida (Write through vs write back), indique que sucede y justifique.

En lineas generales (obtenido de ChatGPT):
En el simulador Ripes, la configuración de la memoria caché se modifica dependiendo de si se elige la política de escritura inmediata (write-through) o la política de escritura diferida (write-back). Aquí tienes una descripción de cada una y cómo se modifica la configuración de la caché en consecuencia:

- Escritura inmediata (Write-Through):

En esta política, cuando se escribe en una ubicación de memoria que está en la caché, también se actualiza el valor correspondiente en la memoria principal de inmediato.
En términos de la configuración de la caché en Ripes, esto significa que cada vez que hay una escritura en la caché, también se realiza una escritura simultánea en la memoria principal.
Esta política garantiza que los datos en la memoria principal y en la caché estén siempre sincronizados, lo que reduce el riesgo de pérdida de datos en caso de fallo del sistema o apagado inesperado.
Sin embargo, puede resultar en un rendimiento más bajo debido a la necesidad de escribir constantemente en la memoria principal, lo que puede generar cuellos de botella en el rendimiento, especialmente en sistemas con muchas escrituras.
No existe el dirty bit, por eso mismo.

- Escritura diferida (Write-Back):

En esta política, las escrituras se realizan inicialmente en la caché. Luego, se actualiza el valor correspondiente en la memoria principal solo cuando se elimina el bloque de caché que contiene los datos modificados.
En la configuración de la caché en Ripes, la diferencia es que en lugar de escribir inmediatamente en la memoria principal cuando se actualiza un valor en la caché, se marca el bloque de caché como "modificado" (por medio del dirty bit) y se posterga la escritura en la memoria principal hasta que el bloque sea reemplazado.
Esto puede mejorar el rendimiento, ya que reduce la cantidad de accesos a la memoria principal, ya que muchas escrituras pueden agruparse y realizarse de manera más eficiente.
Sin embargo, existe un riesgo de pérdida de datos en caso de fallo del sistema o apagado inesperado, ya que los datos pueden permanecer en la caché sin estar reflejados en la memoria principal.

En resumen, la elección entre escritura inmediata y diferida en Ripes implica un compromiso entre consistencia de datos y rendimiento. La escritura inmediata garantiza la consistencia de datos pero puede reducir el rendimiento, mientras que la escritura diferida puede mejorar el rendimiento pero con un mayor riesgo de inconsistencia de datos en caso de fallos. La elección depende de los requisitos específicos de la aplicación y las consideraciones de rendimiento.






